S -> ENTER S
S -> S ENTER
S -> ENTER
S -> IMPORT_ST ENTER S
S -> IMPORT_ST ENTER P
S -> IMPORT_ST
S -> MN
MN -> BD MN
MN -> CLASS_ST
MN -> FUNC_ST
MN -> FOR_ST
MN -> IF_ST
MN -> WHILE_ST
MN -> SENTENCE
BD -> CLASS_ST
BD -> FUNC_ST
BD -> FOR_ST
BD -> IF_ST
BD -> WHILE_ST
BD -> SENTENCE
SENTENCE -> FUNCT
SENTENCE -> ASSIGN
SENTENCE -> METHOD_ST
SENTENCE -> WITH_ST
SENTENCE -> IF_BLOCK
SENTENCE -> FOR_CLS
SENTENCE -> ENTER SENTENCE
SENTENCE -> SENTENCE ENTER SENTENCE
SENTENCE -> SENTENCE ENTER
WITH_ST -> WITH ID LP PARAMFUNGSI RP AS ID TITIKDUA ENTER SENTENCE
DICT -> LCB RCB
DICT -> LCB PARAMDICT RCB
PARAMDICT -> PARAMDICT COMMA PARAMDICT
PARAMDICT -> STATIC TITIKDUA STATIC
LIST -> LSB RSB
LIST -> LSB PARAM RSB
LIST -> LSB ID FOR PARAM IN ID RSB
LIST -> LSB ID FOR PARAM IN RANGE_ST RSB
LIST -> LSB ARIT_OP FOR PARAM IN ID RSB 
LIST -> LSB ARIT_OP FOR PARAM IN RANGE_ST RSB
ARIT_OP -> ID ARIT_OPERATOR ARIT_OP
ARIT_OP -> ID ARIT_OPERATOR ID
ARIT_OP -> STATIC ARIT_OPERATOR ARIT_OP
ARIT_OP -> STATIC ARIT_OPERATOR STATIC
ARIT_OP -> STATIC ARIT_OPERATOR ID
ARIT_OP -> ID ARIT_OPERATOR STATIC
ARIT_OP -> LP ARIT_OP RP
ARIT_OPERATOR -> ADD
ARIT_OPERATOR -> SUBTR
ARIT_OPERATOR -> MUL
ARIT_OPERATOR -> DIV
LOGI_OP -> LOGI_ID LOGI_OPERATOR LOGI_OP
LOGI_OP -> LOGI_ID LOGI_OPERATOR LOGI_ID
LOGI_OP -> LP LOGI_OP RP
LOGI_ID -> FUNCT
LOGI_ID -> METHOD_ST
LOGI_ID -> IDINT
LOGI_ID -> NOT IDINT
LOGI_ID -> BOOL
LOGI_ID -> NOT LOGI_ID
LOGI_ID -> LP LOGI_ID RP 
LOGI_OPERATOR -> ISEQUAL
LOGI_OPERATOR -> LE
LOGI_OPERATOR -> L
LOGI_OPERATOR -> GE
LOGI_OPERATOR -> G
LOGI_OPERATOR -> NEQ
LOGI_OPERATOR -> AND
LOGI_OPERATOR -> OR
PARAM -> ALL
PARAM -> PARAM COMMA PARAM
PARAM -> ARIT_OP
PARAM -> LOGI_OP
PARAM -> METHOD_ST
PARAMFUNGSI -> ID_PARAM COMMA PARAMFUNGSI
PARAMFUNGSI -> ID_PARAM EQ STATIC COMMA PARAMFUNGSI
PARAMFUNGSI -> ID_PARAM EQ STATIC
PARAMFUNGSI -> ID_PARAM
ID_PARAM -> ID
ID_PARAM -> ID TITIKDUA TIPE
STATIC -> INT
STATIC -> STRING
STATIC -> BOOL
STATIC -> LIST
METHOD_ST -> ID LSB IDINT RSB TITIK ID
METHOD_ST -> ID LSB IDINT RSB TITIK FUNCT
METHOD_ST -> KARTITIK LP RP
METHOD_ST -> KARTITIK LP PARAM RP
METHOD_ST -> KARTITIK LP PARAMFUNGSI RP
IF_BLOCK -> IF_ST MORE_ELIF ELSE_ST
IF_BLOCK -> IF_ST MORE_ELIF
IF_BLOCK -> IF_ST ELSE_ST
IF_BLOCK -> IF_ST 
MORE_ELIF -> ELIF_ST
MORE_ELIF -> ELIF_ST MORE_ELIF
IF_ST -> IF FUNCT TITIKDUA ENTER SENTENCE
IF_ST -> IF METHOD_ST TITIKDUA ENTER SENTENCE
IF_ST -> IF LOGI_OP TITIKDUA ENTER SENTENCE
IF_ST -> IF ID IN ID TIITKDUA ENTER SENTENCE
ELIF_ST -> ELIF LOGI_OP TITIKDUA ENTER SENTENCE
ELIF_ST -> ELIF ID IN ID TITIKDUA ENTER SENTENCE
ELSE_ST -> ELSE TITIKDUA ENTER SENTENCE
ASSIGN -> PARAM ASSIGN_OP ASSIGNMENT
ASSIGN -> IDINT ASSIGN_OP ASSIGNMENT
ASSIGN -> KARTITIK ASSIGN_OP ASSIGNMENT
ASSIGN -> ARRAY ASSIGN_OP ASSIGNMENT
ARRAY -> ID LIST
ASSIGN_OP -> EQ
ASSIGN_OP -> SUBAS
ASSIGN_OP -> MULAS
ASSIGN_OP -> SUMAS
ASSIGN_OP -> DIVAS
ASSIGNMENT -> KARTITIK
ASSIGNMENT -> OPERATION
ASSIGNMENT -> ID
ASSIGNMENT -> INT
ASSIGNMENT -> STRING
ASSIGNMENT -> FUNCT
ASSIGNMENT -> ARRAY
ASSIGNMENT -> LIST
ASSIGNMENT -> METHOD_ST
ASSIGNMENT -> DICT
OPERATION -> ARIT_OP
OPERATION -> LOGI_OP
FUNC_ST -> DEF ID LP PARAMFUNGSI RP TITIKDUA ENTER FUNC_SENTENCE
FUNC_ST -> DEF ID LP PARAMFUNGSI RP ARROW TIPE TITIKDUA ENTER FUNC_SENTENCE
FUNC_ST -> DEF ID LP RP TITIKDUA ENTER FUNC_SENTENCE
FUNC_ST -> DEF ID LP RP ARROW TIPE TITIKDUA ENTER FUNC_SENTENCE
FUNC_SENTENCE -> SENTENCE
FUNC_SENTENCE -> RETURN ALL
FUNC_SENTENCE -> PASS
FUNC_SENTENCE -> FUNC_SENTENCE RETURN ALL
FUNC_SENTENCE -> SENTENCE FUNC_SENTENCE
FUNC_SENTENCE -> IF_BLOCK_FUNC
MORE_ELIF_FUNC -> ELIF_ST_FUNC
MORE_ELIF_FUNC -> ELIF_ST_FUNC MORE_ELIF_FUNC
IF_BLOCK_FUNC -> IF_ST_FUNC 
IF_BLOCK_FUNC -> IF_ST_FUNC MORE_ELIF_FUNC
IF_BLOCK_FUNC -> IF_ST_FUNC MORE_ELIF_FUNC ELSE_ST_FUNC
IF_BLOCK_FUNC -> IF_ST_FUNC ELSE_ST_FUNC
IF_ST_FUNC -> IF FUNCT TITIKDUA FUNC_SENTENCE
IF_ST_FUNC -> IF METHOD_ST TITIKDUA FUNC_SENTENCE
IF_ST_FUNC -> IF LOGI_OP TITIKDUA FUNC_SENTENCE
IF_ST_FUNC -> IF ID IN ID TIITKDUA FUNC_SENTENCE
ELIF_ST_FUNC -> ELIF LOGI_OP TITIKDUA FUNC_SENTENCE
ELIF_ST_FUNC -> ELIF ID IN ID TITIKDUA FUNC_SENTENCE
ELSE_ST_FUNC -> ELSE TITIKDUA FUNC_SENTENCE
FUNCT -> ID LP RP
FUNCT -> ID LP PARAM RP
FUNCT -> ID LP PARAMFUNGSI RP
CLASS_ST -> CLASS ID TITIKDUA ENTER CLASS_SENTENCE
CLASS_SENTENCE -> SENTENCE
CLASS_SENTENCE -> FUNC_ST
WHILE_ST -> WHILE LOGI_OP TITIKDUA ENTER LOOP_SENTENCE
WHILE_ST -> WHILE IDINT TITIKDUA ENTER LOOP_SENTENCE
FOR_ST -> FOR ID IN ID TITIKDUA ENTER LOOP_SENTENCE
FOR_ST -> FOR ID IN RANGE LP PARAM RP TITIKDUA ENTER LOOP_SENTENCE
LOOP_SENTENCE -> SENTENCE
LOOP_SENTENCE -> LOOP_SENTENCE ENTER LOOP_SENTENCE
LOOP_SENTENCE -> BREAK
LOOP_SENTENCE -> CONTINUE
IMPORT_ST -> IMPORT ID AS ID
IMPORT_ST -> FROM ID IMPORT ID
IMPORT_ST -> IMPORT ID
RANGE_ST -> RANGE LP IDINT RP
RANGE_ST -> RANGE LP IDINT COMMA IDINT RP
RANGE_ST -> RANGE LP IDINT TITIKDUA IDINT TITIKDUA IDINT RP
ENTER -> NEWLINE ENTER
ENTER -> NEWLINE
ID -> LP ID RP
IDINT -> ID
IDINT -> INT
IDINT -> BOOL
ALL -> IDINT
ALL -> STRING
BOOL -> TRUE
BOOL -> FALSE
STRING -> 'STRING'
EQ -> 'EQ'
ISEQUAL -> 'ISEQ'
LP -> 'LP'
RP -> 'RP'
SC -> 'SC'
TITIKDUA -> 'COLON'
ADD -> 'ADD'
SUBTR -> 'SUB'
MUL -> 'MUL'
DIV -> 'DIV'
LE -> 'LEQ'
L -> 'LESS'
GE -> 'GEQ'
G -> 'GEQ'
NEQ -> 'NEQ'
SUBAS -> 'MINEQ'
MULAS -> 'MULEQ'
SUMAS -> 'ADDEQ'
DIVAS -> 'DIVEQ'
AND -> 'AND'
OR -> 'OR'
NOT -> 'NOT'
IF -> 'IF'
THEN -> 'THEN'
ELSE -> 'ELSE'
ELIF -> 'ELIF'
WHILE -> 'WHILE'
RANGE -> 'RANGE'
FALSE -> 'FALSE'
TRUE -> 'TRUE'
NONE -> 'NONE'
BREAK -> 'BREAK'
AS -> 'AS'
CLASS -> 'CLASS'
CONTINUE -> 'CONTINUE'
DEF -> 'DEF'
FOR -> 'FOR'
FROM -> 'FROM'
FORMAT -> 'FORMAT'
IMPORT -> 'IMPORT'
IN -> 'IN'
IS -> 'IS'
RETURN -> 'RETURN'
RAISE -> 'RAISE'
PASS -> 'PASS'
WITH -> 'WITH'
COMMA -> 'COMMA'
KARTITIK -> 'POINT'
PETIKSATU -> 'SQMARK'
PETIKDUA -> 'QMARK'
LSB -> 'LAB'
RSB -> 'RAB'
LCB -> 'LCB'
RCB -> 'RCB'
INT -> 'NUM'
ID -> 'ID'
NEWLINE -> 'NEWLINE'
TIPE -> 'TYPE'